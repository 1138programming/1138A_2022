{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"U`9aA+=)r+L1tzA.)-qi\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable></variables><block type=\"v5_events_when_autonomous\" id=\"pbH.KXwM1h:,Qi{}6;co\" x=\"590\" y=\"-310\"><next><block type=\"v5_drivetrain_drive\" id=\"ix:.)Qua2Mt$c_}dQ*(g\"><field name=\"DIRECTION\">fwd</field><next><block type=\"v5_control_wait\" id=\"ppl~4aGZ:/,!G;z,)#f(\"><value name=\"DURATION\"><shadow type=\"math_positive_number\" id=\"84IP}aTo$nkl!ftjX{XX\"><field name=\"NUM\">.5</field></shadow></value><next><block type=\"v5_motion_stop_driving\" id=\",9qVs[w?5(,!HtsJj0|M\"><next><block type=\"v5_motion_spin_for\" id=\"]VZ/qG/1A[9qN0y3;pJ*\"><field name=\"MOTOR\">roller</field><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">rev</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"88PXfuZOGhI;T~;{/|$y\"><field name=\"NUM\">.5</field></shadow></value></block></next></block></next></block></next></block></next></block><block type=\"v5_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"70\" y=\"110\"><next><block type=\"v5_drivetrain_set_drive_velocity\" id=\"ZH](-,+lGyCZmfUVjozQ\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"yhHbZ1vd]nS+)Z^#x=hO\"><field name=\"NUM\">50</field></shadow></value><next><block type=\"v5_drivetrain_set_turn_velocity\" id=\"MCgOtoU9Jr%:r`z;lKv+\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"GOUU}jA.n$1M}yLlgg;Z\"><field name=\"NUM\">50</field></shadow></value><next><block type=\"v5_motion_set_motor_velocity\" id=\",N]qx79V3pnj)kT|F%4;\"><field name=\"MOTOR\">roller</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"SRe1Qc[Xi:(-;vi]f=x~\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"v5_motion_set_motor_velocity\" id=\"_,`g@|bV,O[TAb[6N-yo\"><field name=\"MOTOR\">flywheel</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"vnPPp2L{n)PPSV8Lcv3s\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"v5_motion_set_motor_velocity\" id=\"D%PWGS!VHpuL:ury}5rp\"><field name=\"MOTOR\">intake</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"K79[[(K8U^iRP.8i_dnC\"><field name=\"NUM\">50</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block><block type=\"v5_events_when_driver\" id=\"QYRN,%PEQ_SnP,JYl+%l\" x=\"570\" y=\"90\"><next><block type=\"v5_control_forever\" id=\"rporz9}^BWi-tJ_*l+.3\"><statement name=\"SUBSTACK\"><block type=\"v5_control_if_elseif_else\" id=\"?JzpxK]do]QuDF%qnr5(\"><mutation branches=\"5\"></mutation><field name=\"BRANCH_BLANK\">node_modules/@rm-vca/blockly/media/../../../../static/img/ui_imgs/elseif_blank.png</field><field name=\"BRANCH_REMOVE\">node_modules/@rm-vca/blockly/media/../../../../static/img/ui_imgs/elseif_remove.png</field><field name=\"BRANCH_ADD\">node_modules/@rm-vca/blockly/media/../../../../static/img/ui_imgs/elseif_add.png</field><value name=\"CONDITION1\"><block type=\"v5_sensing_pressing_controller\" id=\"6ili97T-8Ukty1/A0tQP\"><field name=\"CONTROLLER\">Controller2</field><field name=\"BUTTON\">ButtonUp</field></block></value><statement name=\"SUBSTACK1\"><block type=\"v5_motion_set_motor_velocity\" id=\"3yVbbUI]T%D?#=esOF`v\"><field name=\"MOTOR\">flywheel</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"5y9OMEmQP0kR[PvoH/zS\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"v5_motion_spin\" id=\"8ten{4#$HlGp$O{aXeUh\"><field name=\"MOTOR\">flywheel</field><field name=\"DIRECTION\">fwd</field></block></next></block></statement><value name=\"CONDITION2\"><block type=\"v5_sensing_pressing_controller\" id=\"@:K,JiygZ)+!,jyJkP)n\"><field name=\"CONTROLLER\">Controller2</field><field name=\"BUTTON\">ButtonLeft</field></block></value><statement name=\"SUBSTACK2\"><block type=\"v5_motion_set_motor_velocity\" id=\"Ur(bbev^+#r([U;|R`Vy\"><field name=\"MOTOR\">flywheel</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"?(iA?VyDkee$WzkgWUw^\"><field name=\"NUM\">75</field></shadow></value><next><block type=\"v5_motion_spin\" id=\"Bduw*RoRpkpM=;LF25?Y\"><field name=\"MOTOR\">flywheel</field><field name=\"DIRECTION\">fwd</field></block></next></block></statement><value name=\"CONDITION3\"><block type=\"v5_sensing_pressing_controller\" id=\"w?;c0hg2`o=UE;K~%daF\"><field name=\"CONTROLLER\">Controller2</field><field name=\"BUTTON\">ButtonDown</field></block></value><statement name=\"SUBSTACK3\"><block type=\"v5_motion_set_motor_velocity\" id=\"S9Hy9+@MgSvu|zXzpp:z\"><field name=\"MOTOR\">flywheel</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\".A+4d;;ovZthHq}E*=pQ\"><field name=\"NUM\">50</field></shadow></value><next><block type=\"v5_motion_spin\" id=\")bh4?Al^nhxb4uDL|O]U\"><field name=\"MOTOR\">flywheel</field><field name=\"DIRECTION\">fwd</field></block></next></block></statement><value name=\"CONDITION4\"><block type=\"v5_sensing_pressing_controller\" id=\"qIU2R5P!p8eb)XM/aHnG\"><field name=\"CONTROLLER\">Controller2</field><field name=\"BUTTON\">ButtonRight</field></block></value><statement name=\"SUBSTACK4\"><block type=\"v5_motion_set_motor_velocity\" id=\"s4R^oB(:fM~)Bpp[!Imi\"><field name=\"MOTOR\">flywheel</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"wBGwn#!Av=~Zw5.NtCSb\"><field name=\"NUM\">25</field></shadow></value><next><block type=\"v5_motion_spin\" id=\"YTQ.yDkW1vF+S^w}?pWC\"><field name=\"MOTOR\">flywheel</field><field name=\"DIRECTION\">fwd</field></block></next></block></statement><value name=\"CONDITION5\"><block type=\"v5_sensing_pressing_controller\" id=\"!rDC9zD}T+z!(KPQXjz~\"><field name=\"CONTROLLER\">Controller2</field><field name=\"BUTTON\">ButtonX</field></block></value><statement name=\"SUBSTACK5\"><block type=\"v5_motion_stop_motor\" id=\"5zZ{OYYRU3rDvkd4NzQi\"><field name=\"MOTOR\">flywheel</field></block></statement></block></statement></block></next></block></xml>","rconfig":[{"port":[2,11,20,3,19],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"84:36","direction":"rev","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[1],"name":"roller","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[9],"name":"intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[10],"name":"flywheel","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"roller","leftDir":"false","right":"intake","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"tank","id":"primary"},"triportSourcePort":22},{"port":[],"name":"Controller2","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"expansion","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"partner"},"triportSourcePort":22},{"port":[6],"name":"expansion","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor leftMotorA = motor(PORT2, ratio18_1, true);\nmotor leftMotorB = motor(PORT11, ratio18_1, true);\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);\nmotor rightMotorA = motor(PORT20, ratio18_1, false);\nmotor rightMotorB = motor(PORT3, ratio18_1, false);\nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);\ninertial DrivetrainInertial = inertial(PORT19);\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, DrivetrainInertial, 319.19, 320, 40, mm, 2.3333333333333335);\n\nmotor roller = motor(PORT1, ratio36_1, false);\n\nmotor intake = motor(PORT9, ratio18_1, false);\n\nmotor flywheel = motor(PORT10, ratio6_1, false);\n\ncontroller Controller1 = controller(primary);\ncontroller Controller2 = controller(partner);\nmotor expansion = motor(PORT6, ratio18_1, false);\n\n\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Inertial\");\n  DrivetrainInertial.calibrate();\n  while (DrivetrainInertial.isCalibrating()) {\n    wait(25, msec);\n  }\n\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\n\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller1LeftShoulderControlMotorsStopped = true;\nbool Controller1RightShoulderControlMotorsStopped = true;\nbool DrivetrainLNeedsToBeStopped_Controller1 = true;\nbool DrivetrainRNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // stop the motors if the brain is calibrating\n      if (DrivetrainInertial.isCalibrating()) {\n        LeftDriveSmart.stop();\n        RightDriveSmart.stop();\n        while (DrivetrainInertial.isCalibrating()) {\n          wait(25, msec);\n        }\n      }\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3\n      // right = Axis2\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position();\n      int drivetrainRightSideSpeed = Controller1.Axis2.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonL1/ButtonL2 status to control roller\n      if (Controller1.ButtonL1.pressing()) {\n        roller.spin(forward);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonL2.pressing()) {\n        roller.spin(reverse);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (!Controller1LeftShoulderControlMotorsStopped) {\n        roller.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1LeftShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonR1/ButtonR2 status to control intake\n      if (Controller1.ButtonR1.pressing()) {\n        intake.spin(forward);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonR2.pressing()) {\n        intake.spin(reverse);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (!Controller1RightShoulderControlMotorsStopped) {\n        intake.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1RightShoulderControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\n// define variables used for controlling motors based on controller inputs\nbool Controller2LeftShoulderControlMotorsStopped = true;\n\n// define a task that will handle monitoring inputs from Controller2\nint rc_auto_loop_function_Controller2() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // check the ButtonL1/ButtonL2 status to control expansion\n      if (Controller2.ButtonL1.pressing()) {\n        expansion.spin(forward);\n        Controller2LeftShoulderControlMotorsStopped = false;\n      } else if (Controller2.ButtonL2.pressing()) {\n        expansion.spin(reverse);\n        Controller2LeftShoulderControlMotorsStopped = false;\n      } else if (!Controller2LeftShoulderControlMotorsStopped) {\n        expansion.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller2LeftShoulderControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\ntask rc_auto_loop_task_Controller2(rc_auto_loop_function_Controller2);\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\ncompetition Competition;\n\nfloat myVariable;\n\n// \"when autonomous\" hat block\nint onauton_autonomous_0() {\n  Drivetrain.drive(forward);\n  wait(0.5, seconds);\n  Drivetrain.stop();\n  roller.spinFor(reverse, 0.5, turns, true);\n  return 0;\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  Drivetrain.setDriveVelocity(50.0, percent);\n  Drivetrain.setTurnVelocity(50.0, percent);\n  roller.setVelocity(100.0, percent);\n  flywheel.setVelocity(100.0, percent);\n  intake.setVelocity(50.0, percent);\n  return 0;\n}\n\n// \"when driver control\" hat block\nint ondriver_drivercontrol_0() {\n  while (true) {\n    if (Controller2.ButtonUp.pressing()) {\n      flywheel.setVelocity(100.0, percent);\n      flywheel.spin(forward);\n    } else if (Controller2.ButtonLeft.pressing()) {\n      flywheel.setVelocity(75.0, percent);\n      flywheel.spin(forward);\n    } else if (Controller2.ButtonDown.pressing()) {\n      flywheel.setVelocity(50.0, percent);\n      flywheel.spin(forward);\n    } else if (Controller2.ButtonRight.pressing()) {\n      flywheel.setVelocity(25.0, percent);\n      flywheel.spin(forward);\n    } else if (Controller2.ButtonX.pressing()) {\n      flywheel.stop();\n    } else {\n    }\n  wait(5, msec);\n  }\n  return 0;\n}\n\nvoid VEXcode_driver_task() {\n  // Start the driver control tasks....\n  vex::task drive0(ondriver_drivercontrol_0);\n  while(Competition.isDriverControl() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  drive0.stop();\n  return;\n}\n\nvoid VEXcode_auton_task() {\n  // Start the auton control tasks....\n  vex::task auto0(onauton_autonomous_0);\n  while(Competition.isAutonomous() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  auto0.stop();\n  return;\n}\n\n\n\nint main() {\n  vex::competition::bStopTasksBetweenModes = false;\n  Competition.autonomous(VEXcode_auton_task);\n  Competition.drivercontrol(VEXcode_driver_task);\n\n  // Calibrate the Drivetrain\n  calibrateDrivetrain();\n\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}","target":"Physical"}